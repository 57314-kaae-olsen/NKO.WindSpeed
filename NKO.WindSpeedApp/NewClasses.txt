
/*

https://www.th-friedrichs.de/en/products/wind/ultrasonic-anemometer/2d-ultrasonic-anemometer/

I am proud to present my new 2D Ultrasonic Anemometer. The new 2D Ultrasonic Anemometer is designed for simultaneous measurement of horizontal wind speed and wind direction parameters as well as the acoustic temperature, without use of any moving parts.

R =specific gas constant = 287.058 J / (kg · K) for dry air


https://www.engineeringtoolbox.com/specific-heat-ratio-d_602.html

Specific Heat Ratio of Air at Standard Atmospheric Pressure in SI Units:
kappa = 1.401


Interface IWindSensor
{
	SensorData GetSensorData()
}

new class HCSR04
{
	double GetDistance   MeasureDistance
}

new class UltraSonicWindSensor : IWindSensor
{
}

 * new class WindSensor(double l) : IWindSensor
 * {
 *    UltrasonicSensorData Measure()
 * }
 * 
 * new class UltrasonicSensorData  Result
 * {
 *   DataTime time
 *   double tN, tS, TE, TW   t1, t2, t3, t4
 *   
 *   double Temperature
     double vs
 *   }
 * 
 * new class Wind
 * {
 *   ctor (speed, alpha)
 *   
 *   (U,V) GetUV()
 *   Speed
 *   Alpha
 *   TetaNorth
 *   
 *   string override GetString()   // "Speed = 7.1 Direction = 65 deg"
 * }
 * 
 * new class SensorData2WindConverter / Adapter / Calculator
 * {
 *   ctor(length)
 *   public Wind Convert(SensorData sensor)
 * }
 *  
 *  new class WindStat
 *  {
 *   Queue <Wind> _WindSample
 *   ctor ( ? )
 *    AddNewWind(Wind)
 *    Kalman ?
 *    Wind   Wind2Min  {get;}
 *    Wind   Wind10Min  {get;}
 *    
 *    Wind   WindPeak2Min  {get;}
 *    WInd   WIndPeak10Min  {get;}
 *    
 *    
 *  }
 * 
 *   Timer timer = new Timer( 1 sec ...)
 *   
 *   OnTimer()
 *   {
 *      SensorData sensorData = windSensor.Measure()
 *      Wind wind = sensorDataToWind.Convert(sensorData)
 *      windStat.AddNew(Wind);
 *      
 *      COnsole.writeLine(WinStat.Wind2Min.Speed, WinStat.Wind2Min.TetaNorth )
 *   }

 Alternativ:
    new Class Anemometer
	{
		Anemometer(IWindSensor windSensor)
		GetCurrentSpeed()
		GetCurrentDirection

	
	}
 *   
 *   
 *   RESTAPI
 *   
 *      Wind Wind2Min
 *      Wind Wind10Min
 *      string sensorStat
*/


//  Klasser  -----------------------------------

UltraSoundAnemometer

UltraSoundWindSensor

UltraSoundSensorDataConverter / Adapter / Calculator

HCSR04